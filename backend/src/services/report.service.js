import PDFDocument from "pdfkit";
import fs from "fs";
import path from "path";
import axios from "axios";
import { uploadOnCloudinary } from "../utils/cloudinary.js";

// helper: download image from url and return buffer
async function fetchImageBuffer(url) {
  const resp = await axios.get(url, { responseType: "arraybuffer" });
  return Buffer.from(resp.data, "binary");
}

export async function generateIssueReport(issue) {
  const tempDir = path.join("public", "temp");
  if (!fs.existsSync(tempDir)) {
    fs.mkdirSync(tempDir, { recursive: true });
  }

  const outPath = path.join(tempDir, `report-${issue._id}.pdf`);

  return new Promise(async (resolve, reject) => {
    try {
      const doc = new PDFDocument({ size: "A4", margin: 50 });
      const stream = fs.createWriteStream(outPath);
      doc.pipe(stream);

      // ---------- HEADER ----------
      doc
        .fontSize(22)
        .fillColor("#2c3e50")
        .text("Civic Eye - Issue Report", { align: "center" });
      doc.moveDown(0.5);
      doc
        .fontSize(12)
        .fillColor("#7f8c8d")
        .text(`Report generated for Issue ID: ${issue._id}`, { align: "center" });
      doc.moveDown(1);

      // ---------- DETAILS ----------
      const details = [
        ["Title", issue.title],
        ["Description", issue.description],
        ["Reported By", `${issue.reportedBy?.name || ""} (${issue.reportedBy?.email || ""})`],
        ["Type", issue.type],
        ["Location", issue.location?.address || ""],
        ["Coordinates", issue.location?.coordinates?.join(", ") || ""],
        ["Classified Dept", issue.classifiedDept || ""],
        ["Assigned Dept", issue.assignedDept || ""],
        ["Status", issue.status || ""],
      ];

      details.forEach(([label, value]) => {
        doc
          .font("Helvetica-Bold")
          .fontSize(12)
          .fillColor("#2c3e50")
          .text(`${label}:`, { continued: true, width: 150 });

        doc
          .font("Helvetica")
          .fontSize(12)
          .fillColor("#34495e")
          .text(value || "-", { align: "left" });

        doc.moveDown(0.3);
      });

      // ---------- IMAGE ----------
      if (issue.images && issue.images[0]) {
        doc.addPage();
        doc
          .fontSize(14)
          .fillColor("#2c3e50")
          .text("Attached Image:", { underline: true });
        doc.moveDown(0.5);

        try {
          const imgBuffer = await fetchImageBuffer(issue.images[0]);
          doc.image(imgBuffer, {
            fit: [400, 300],
            align: "center",
            valign: "center",
          });
        } catch (err) {
          console.warn("⚠️ Failed to embed image:", err.message);
          doc.fontSize(12).fillColor("red").text("⚠️ Failed to load image");
        }
      }

      // ---------- FOOTER ----------
      doc.moveDown(2);
      doc
        .fontSize(10)
        .fillColor("#7f8c8d")
        .text("Generated by Civic Eye System", { align: "center" });

      doc.end();

      // upload after finishing stream
      stream.on("finish", async () => {
        try {
          const uploadResp = await uploadOnCloudinary(outPath, "reports");
          resolve(uploadResp.secure_url);
        } catch (err) {
          reject(err);
        }
      });

      stream.on("error", (err) => reject(err));
    } catch (err) {
      reject(err);
    }
  });
}
